# Generated by Django 4.1.6 on 2023-02-26 17:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.CharField(choices=[('ADMIN', 'Admin'), ('REGULAR_USER', 'Regular User'), ('BUSINESS_OWNER', 'Business Owner')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=3, max_digits=12)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('BLOCKED', 'Blocked')], max_length=20)),
                ('type', models.CharField(choices=[('SYSTEM', 'System'), ('USER', 'User')], max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='account', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('type', models.CharField(choices=[('PUBLIC', 'Public'), ('PRIVATE', 'Private')], max_length=60)),
                ('is_read', models.BooleanField(default=False)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_price', models.FloatField(validators=[django.core.validators.MinValueValidator(0.1)])),
                ('status', models.CharField(choices=[('REQUESTED', 'Requested'), ('CANCELED', 'Canceled'), ('RESELL', 'Resell'), ('SUCCESS', 'Success')], max_length=20)),
                ('cancel_request_time', models.DateTimeField(blank=True, null=True)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('reserver', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reservation', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.PositiveIntegerField()),
                ('count_of_seats', models.PositiveIntegerField()),
                ('count_of_rows', models.PositiveIntegerField()),
                ('type', models.CharField(choices=[('CINEMA', 'Cinema'), ('RESTAURANT', 'Restaurant'), ('THEATER', 'Theater')], max_length=20)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('business_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('FAILED', 'Failed'), ('PENDING', 'Pending'), ('SUCCESS', 'Success')], max_length=60)),
                ('amount', models.FloatField(validators=[django.core.validators.MinValueValidator(0.1)])),
                ('type', models.CharField(blank=True, choices=[('REGISTER', 'Register'), ('RESERVE', 'Reserve'), ('CANCELED', 'Canceled'), ('RESELL', 'Resell')], max_length=30, null=True)),
                ('description', models.TextField()),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='transaction', to='main.account')),
                ('reservation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.reservation')),
                ('seat_owner_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='transactions', to='main.account')),
            ],
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=3, max_digits=12, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('position', models.CharField(choices=[('FIRST_ROW', 'First Row'), ('LAST_ROW', 'Last Row'), ('MIDDLE_ROWS', 'Middle Rows'), ('REGULAR_ROWS', 'Regular Rows')], max_length=12)),
                ('status', models.CharField(choices=[('RESERVED', 'Reserved'), ('RESELL', 'Resell'), ('UNRESERVED', 'Unreserved')], max_length=12)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.room')),
            ],
        ),
        migrations.AddField(
            model_name='reservation',
            name='seat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.seat'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='seat_owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reservations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Resell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_price', models.FloatField(validators=[django.core.validators.MinValueValidator(0.1)])),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.reservation')),
                ('reserver', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='parent_comment', to='main.comment')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='comment', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
